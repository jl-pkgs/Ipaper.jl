> 计算anomaly的3种方法
# 1. 一维向量

```{julia}
using BenchmarkTools
using Test
using Ipaper
import Ipaper: cal_mTRS_base, cal_mTRS_season, cal_mTRS_full

dates = make_date(1961, 1, 1):Day(1):make_date(2000, 12, 31) |> collect
n = length(dates)
set_seed(1)

arr = rand(Float32, 1, 1, n)
obj_size(arr)

kw = (; parallel=true, p1=1961, p2=1980)
@time anom_full = cal_anomaly_quantile(arr, dates; kw..., method="full")
@time anom_base = cal_anomaly_quantile(arr, dates; kw..., method="base")
@time anom_season = cal_anomaly_quantile(arr, dates; kw..., method="season")

@test size(anom_base) == size(anom_full)
@test size(anom_base) == size(anom_season)

size(squeeze_head(anom_full)) == n
# Threads.nthreads()
```


# 2. 三维数据

## 2.1. the hard way
```{julia}
using BenchmarkTools
using Test
using Ipaper
import Ipaper: cal_mTRS_base, cal_mTRS_season, cal_mTRS_full

dates = make_date(1961, 1, 1):Day(1):make_date(2000, 12, 31) |> collect
n = length(dates)
set_seed(1)

arr = rand(Float32, 35, 20, n)
obj_size(arr)
# Threads.nthreads()
```

### 2.1.1. mTRS_full

```{julia}
# 动态的阈值，考虑未来的升温幅度，2种方案
# reset_timer!(to);
@time TRS_full = cal_mTRS_full(arr, dates; probs=[0.5], 
  na_rm=true, use_mov=true, parallel=true) |> squeeze;
obj_size(TRS_full)
```

```{julia}
# 另外一种方法, 采用nanmean的效率更低
@time clim_full = cal_climatology_full(arr, dates; 
  use_mov=true, parallel=true, fun=nanmedian);
obj_size(clim_full)
clim_full == TRS_full
```

### 2.1.2. mTRS_season

```{julia}
p1 = 1981; p2 = 2010
@time mTRS = cal_mTRS_base(arr, dates; probs=[0.5], p1, p2, 
  use_mov=true, na_rm=true, parallel=true) |> squeeze;
```

```{julia}
@btime res1 = _cal_anomaly(arr, mTRS, dates; option=1);
@btime res2 = _cal_anomaly(arr, mTRS, dates; option=2);

res1 == res2

@time T_wl = cal_warming_level(arr, dates; p1, p2);
@btime res3 = _cal_anomaly(arr, mTRS, dates; option=2, T_wl);
# reset_timer!(to)
# to
```

## 2.2. 傻瓜模式
```{julia}
## 采用`quantile`计算
kw = (; parallel=true, p1=1961, p2=1980)
@time anom_full = cal_anomaly_quantile(arr, dates; kw..., method="full")
@time anom_base = cal_anomaly_quantile(arr, dates; kw..., method="base")
@time anom_season = cal_anomaly_quantile(arr, dates; kw..., method="season")

@test size(anom_base) == size(anom_full)
@test size(anom_base) == size(anom_season)


## 采用`fun_clim`:`nanmean`计算
kw = (; parallel=true, p1=1961, p2=1980, fun_clim=nanmedian)
@time anom_full2 = cal_anomaly(arr, dates; kw..., method="full")
@time anom_base2 = cal_anomaly(arr, dates; kw..., method="base")
@time anom_season2 = cal_anomaly(arr, dates; kw..., method="season")

@test size(anom_base) == size(anom_full)
@test size(anom_base) == size(anom_season)

@test anom_base == anom_base2
@test anom_season == anom_season2
@test anom_full ≈ anom_full2
```
